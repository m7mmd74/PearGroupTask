// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace PearTask.Models
{
    public partial class Product
    {
        [Key]
        public int ProductID { get; set; }
        [RegularExpression(@"^[a-zA-Z][a-zA-Z0-9\s]*$", ErrorMessage = "Product name must start with a letter and may contain numbers.")]

        [Required(ErrorMessage = "Product name is required.")]
        [StringLength(50, ErrorMessage = "Product name cannot be longer than 50 characters.")]
        [Unicode(false)]
        public string ProductName { get; set; }

        [RegularExpression(@"^[a-zA-Z\s]*$", ErrorMessage = "QuantityPerUnit name can only contain letters.")]
        [Required(ErrorMessage = "QuantityPerUnit should be in [Kilo, box, can, liter, bottle].")]
        [StringLength(50,MinimumLength =3 ,ErrorMessage = "QuantityPerUnit cannot be less than 3 characters & longer than 50 characters.")]
        [Unicode(false)]
        public string QuantityPerUnit { get; set; }

        [Required(ErrorMessage = "ReorderLevel name is required.")]
        [Range(0, int.MaxValue, ErrorMessage = "Reorder level must be a non-negative number.")]
        public int? ReorderLevel { get; set; }

        [Required(ErrorMessage = "SupplierID name is required.")]
        [Range(0, int.MaxValue, ErrorMessage = "Supplier ID must be Selected.")]
        public int? SupplierID { get; set; }

        [Column(TypeName = "decimal(10, 2)")]
        [Range(0, double.MaxValue, ErrorMessage = "Unit price must be a non-negative number.")]
        [Required(ErrorMessage = "UnitPrice is required.")]
        [RegularExpression(@"^\d+\.?\d*$", ErrorMessage = "Invalid decimal number.")]
        public decimal? UnitPrice { get; set; }

        [Range(0, int.MaxValue, ErrorMessage = "Units in stock must be a non-negative number.")]
        [Required(ErrorMessage = "UnitsInStock is required.")]
        public int? UnitsInStock { get; set; }

        [Range(0, int.MaxValue, ErrorMessage = "Units on order must be a non-negative number.")]
        [Required(ErrorMessage = "UnitsOnOrder is required.")]
        public int? UnitsOnOrder { get; set; }

        [ForeignKey("SupplierID")]
        [InverseProperty("Products")]
        public virtual Supplier Supplier { get; set; }
    }
}